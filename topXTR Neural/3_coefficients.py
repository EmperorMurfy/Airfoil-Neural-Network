
""" Variables: Alpha, CoefficientLift, reynoldsNumber
    Training RSquare # = 0.8536057
    Validation RSquare # = 0.8541059
 """

from __future__ import division
import jmp_score as jmp
from math import *
import numpy as np


""" ====================================================================
 Copyright (C) 2022 JMP Statistical Discovery LLC. All rights reserved.
 
 Notice: The following permissions are granted provided that the above
 copyright and this notice appear in the score code and any related
 documentation. Permission to copy, modify and distribute the score
 code generated using JMP (r) software is limited to customers of JMP
 Statistical Discovery LLC ("JMP") and successive third parties, all
 without any warranty, express or implied, or any other obligation by
 JMP. JMP and all other JMP Statistical Discovery LLC product and
 service names are registered trademarks or trademarks of JMP
 Statistical Discovery LLC in the USA and other countries. Except as
 contained in this notice, the name of JMP shall not be used in the
 advertising or promotion of products or services without prior
 written authorization from JMP Statistical Discovery LLC.
 ==================================================================== """

""" Python code generated by JMP 17.0.0 """

def getModelMetadata():
	return {"creator": u"Neural", "modelName": u"", "predicted": u"topXTR", "table": u"combinedAirfoilDataLabeled", "version": u"17.0.0", "timestamp": u"2025-09-26T04:17:49Z"}


def getInputMetadata():
    return {
        u"alpha": "float",
        u"coefficientLift": "float",
        u"reynoldsNumber": "float"
	}


def getOutputMetadata():
    return {
        u"Predicted topXTR": "float"
	}


def score(indata, outdata):




    H1_1 = tanh((-0.819652937068195 + -0.0593609069747634 * indata[u"alpha"] + 3.42286165232314 * indata[u"coefficientLift"] + 0.0000014462670203659 * indata[u"reynoldsNumber"]))

    H1_2 = tanh((1.05823690644944 + -0.286259325450575 * indata[u"alpha"] + 0.949920769938808 * indata[u"coefficientLift"] + -0.0000007984992335172 * indata[u"reynoldsNumber"]))

    H1_3 = tanh((0.818189539380938 + 0.0589357488254034 * indata[u"alpha"] + -3.43028055398271 * indata[u"coefficientLift"] + -0.0000014496584864053 * indata[u"reynoldsNumber"]))

    outdata[u"Predicted topXTR"] = 0.526512865964646 + -32.6980404712183 * H1_1 + 0.297075989502132 * H1_2 + -32.5200801639574 * H1_3

    return outdata[u"Predicted topXTR"]


